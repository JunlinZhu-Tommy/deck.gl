requirejs.config({
  paths: {
    deck: 'https://unpkg.com/@deck.gl/core@7.1.0/dist.min',
    deckjson: 'https://unpkg.com/@deck.gl/json@7.1.0/dist.min',
    decklayers: 'https://unpkg.com/@deck.gl/layers@7.1.0/dist.min',
    deckaggregate: 'https://unpkg.com/@deck.gl/aggregation-layers@7.1.0/dist.min',
    mapboxgl: 'https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl',
    luma: 'https://unpkg.com/@luma.gl/core@7.1.0/dist/dist.min'
  },
  shim : {
    'deckaggregate': ['deck', 'decklayers', 'luma']
  }
});

let config, mapLayer, jsonInput, jsonConverter;

jsonInput = JSON.parse(JSON.stringify({{json_input}}));

function setMapProps(map, props) {
  if ('viewState' in props && props.viewState.longitude && props.viewState.latitude) {
    const {viewState} = props;
    map.jumpTo({
      center: [viewState.longitude, viewState.latitude],
      zoom: Number.isFinite(viewState.zoom) ? viewState.zoom : 10,
      bearing: viewState.bearing || 0,
      pitch: viewState.pitch || 0
    });
  }

  if (props.map && 'style' in props.map) {
    if (props.map.style !== map.deckStyle) {
      map.setStyle(props.map.style);
      map.deckStyle = props.map.style;
    }
  }
}


function onViewportChange({viewState}) {
  config.setProps({viewState});
  setMapProps(mapLayer, {viewState});
}


function valueChanged() {
  const jsonProps = jsonConverter.convertJsonToDeckProps(jsonInput);
  config.setProps(jsonProps);
  setMapProps(mapLayer, config.props);
}


function init(luma, deckJson, deckgl, deckglLayers, mapboxgl, deckAggregationLayers) {
   mapboxgl.accessToken = '{{mapbox_api_key}}',
   mapLayer = new mapboxgl.Map({
    container: 'map',
    interactive: false,
    style: null
  });

  jsonConverter = new deckJson._JSONConverter({
    configuration: {
      layers: {...deckglLayers, ...deckAggregationLayers}
    }
  });

  config = new deckgl.Deck({
    canvas: 'deck-map-container',
    height: '100%',
    width: '100%',
    onLoad: valueChanged.bind(this),
    views: [new deckgl.MapView()],
    onViewStateChange: onViewportChange.bind(this)
  });
}

requirejs(['luma', 'deckjson', 'deck', 'decklayers', 'mapboxgl', 'deckaggregate'], init);
